https://hub.docker.com/
pathikpaul
cxxxxx

Centos  Prerequisites   Docker CE is supported on CentOS 7.3 64-bit.
** Build a Machine using vagrant **

Open Ports
    Add the following to /etc/sysctl.conf: net.ipv4.ip_forward = 1
    Apply the sysctl settings: sysctl -p
    sudo firewall-cmd --direct --permanent --add-rule ipv4 nat POSTROUTING 0 -o eth_ext -j MASQUERADE
    sudo firewall-cmd --direct --permanent --add-rule ipv4 filter FORWARD 0 -i eth_int -o eth_ext -j ACCEPT
    sudo firewall-cmd --direct --permanent --add-rule ipv4 filter FORWARD 0 -i eth_ext -o eth_int -m state --state RELATED,ESTABLISHED -j ACCEPT
or
    sudo systemctl stop firewalld
    sudo systemctl disable firewalld

Install Pre Requisites
    sudo yum install -y yum-utils
    sudo yum-config-manager --add-repo  https://download.docker.com/linux/centos/docker-ce.repo
    sudo yum makecache fast
    sudo yum -y install docker-ce
    sudo systemctl start docker
or
    sudo yum install -y docker
    sudo service docker start

................................................................................................    
................................................................................................    
Test Docker  
................................................................................................    
sudo docker run hello-world
sudo docker run ubuntu /bin/echo a
sudo docker run -t -i ubuntu /bin/bash
................................................................................................    
................................................................................................    
Docker Build
................................................................................................    
src/index.php 
<html>
 <head>
    <title>PHP Test</title>
 </head>
    <body>
        <?php echo '<p>Hello World</p>'; ?> 
    </body>
</html>

FROM php:7.1-apache
COPY src/ /var/www/html/
EXPOSE 80

$ ls 
Dockerfile src
$ docker build -t hello-world . 

$ docker run -p 80:80 hello-world
    ## http://192.168.1.13/ worked
$ docker run -p 80:80 -v /home/docker/src/:/var/www/html/  hello-world
    ## worked

docker ps -a
docker diff 625fbff0d54d
docker inspect 625fbff0d54d
docker commit 5d4bdae290a4 fideloper/docker-example:0.1

................................................................................................    
................................................................................................    
Custom Docker File 

$ docker build -f dockerfile_pathik -t hello-world . 

................................................................................................    
................................................................................................    
--------------------------------------------------------------------------------------------------------------
https://serversforhackers.com/getting-started-with-docker
https://github.com/fideloper/docker-mysql
    MySQL Docker File
--------------------------------------------------------------------------------------------------------------
https://prakhar.me/docker-curriculum/
 docker run prakhar1989/static-site
 docker run -d -P --name static-site prakhar1989/static-site
 docker port static-site
    443/tcp -> 0.0.0.0:32768
    80/tcp -> 0.0.0.0:32769
        http://192.168.1.13:32769/
 docker run -p 8888:80 prakhar1989/static-site
        http://192.168.1.13:8888/
 docker stop ... 
 docker kill ...

docker pull ubuntu:12.04

   Dockerfile
    FROM python:3-onbuild
    EXPOSE 5000
    CMD ["python", "./app.py"] 
  docker build -t prakhar1989/catnip .
  docker run -p 8888:5000 prakhar1989/catnip
  docker run -dp 9200:9200 elasticsearch
--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------
Learn docker from Cloud Academy
- Ubuntu
- Container technology evolution
	- chroot -> freebsd jails -> cgroups (io,cpu,memory)->docker
- container fundamentals (short video)
	docker run hello-world
	docker run -it ubuntu bash
	docker images
		** each container gets a unique ID
	curl wttr.in/helsinki
		**
- Docker container fundamentals Part2
	sudo docker run -d nginx 
	sudo docker ps
	sudo docker run -p 8080:80 -d nginx 
		http://192.168.77.10:8080/
		curl localhost:8080
		sudo docker port 4f9da0e2b31f
		sudo docker port 4f9da0e2b31f 80
	sudo docker run -P -d nginx
	** Cleanup
	sudo docker stop `sudo docker ps -aq`
	sudo docker rm   `sudo docker ps -aq`
	** Linking:::
	sudo docker run --name test-server -d nginx 
	sudo docker run -it --link test-server tutum/curl bash
		cat /etc/hosts
		cat /etc/hosts | grep test-server
                curl test-server
                curl test-server:80
	sudo docker run -it --link test-server tutum/curl curl test-server:80
	sudo docker run -it --link test-server:tserver tutum/curl curl tserver:80
	** Mounting volumes
	vi /home/hadoop/src/hello.txt
	vi /home/hadoop/src/index.html  ### necessary 
	cd /home/hadoop/
	sudo docker run --name hello1      -v "${PWD}/src:/usr/share/nginx/html" -d nginx
		$ sudo docker ps -a
		CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES
		00d12dbadeae        nginx               "nginx -g 'daemon off"   14 seconds ago      Up 12 seconds       80/tcp              hello1
		** Connecting to a container
		$ sudo docker exec -it  00d12dbadeae /bin/bash
	sudo docker run -it --link hello1      tutum/curl curl hello1:80
	sudo docker run -it --link hello1      tutum/curl curl hello1:80/hello.txt
	echo "This is new text added later" >> src/hello.txt
	sudo docker run -it --link hello1      tutum/curl curl hello1:80/hello.txt
		* New text should be displayed
	** Storing data
	sudo docker run -d  --name redis01 redis
    sudo docker run -it --link redis01 redis redis-cli -h redis01 set foo bar
	sudo docker run -it --link redis01 redis redis-cli -h redis01 get foo
	sudo docker run -it --link redis01 redis redis-cli -h redis01 save
		sudo docker ps -q
			2f11ed206c2f
		 sudo docker inspect 2f11ed206c2f | more
          "Mounts": [
            {
                "Name": "f30ab74b0275f358a8478f9559684c2aebfebf2f1333201671ea48345eef715e",
                "Source": "/var/lib/docker/volumes/f30ab74b0275f358a8478f9559684c2aebfebf2f1333201671ea48345eef715e/_data",
                "Destination": "/data",
                "Driver": "local",
                "Mode": "",
                "RW": true,
                "Propagation": ""
            }
    sudo docker stop  redis01
	sudo docker start redis01 
	sudo docker run -it --link redis01 redis redis-cli -h redis01 get foo
		** Still there
	cd /home/hadoop
	mkdir redis_data
	sudo docker run -d  --name redis02 -v "${PWD}/redis_data:/data" redis
	sudo docker run -it --link redis02 redis redis-cli -h redis02 set foo bar
	sudo docker run -it --link redis02 redis redis-cli -h redis02 get foo
	sudo docker run -it --link redis02 redis redis-cli -h redis02 save
	find redis_data
		redis_data/dump.rdb  ## created
	*** Building our own docker images ***
		    cd /home/hadoop/build
				echo "Hello World from Pathik.." > hello.txt
                    ** create index.html if needed
			Dockerfile
				FROM nginx
				COPY hello.txt  /usr/share/nginx/html
            sudo docker build -t pathik/docker-nginx-example .
            sudo docker images
            sudo docker run -d -p 8080:80 pathik/docker-nginx-example
            curl localhost:8080
            curl localhost:8080/hello.txt
	*** nodejs hello world ***
         cd /home/hadoop/build_njs_hello1
            vi Dockerfile servers.js
                FROM ubuntu:14.04
                RUN apt-get update -y
                RUN apt-get install -y curl
                RUN curl -sL https://deb.nodesource.com/setup_4.x | bash -
                RUN apt-get install -y node.js
                COPY server.js /
                EXPOSE 8080
                CMD [ "node", "/server.js" ]
            vi Dockerfile servers.js
                // Load the http module to create a http server
                var http = require('http');
                // Configure our HTTP server to respond with Hello Pathik to all requests.
                var server = http.createServer(function (request,response) {
                    response.writeHead(200,{"Content-Type":"text/plain"});
                    response.end(" Hello Pathik ..........  \n");
                });
                // Listen on port 8000
                server.listen(8080, function() {
                    console.log('Server Listening .... ');
                });
            sudo docker build -t pathikpaul/build_njs_hello1 .
            sudo docker run -d -p 8080:8080 pathikpaul/build_njs_hello1
            curl localhost:8080
            curl localhost:8080/hello.txt
         cd /home/hadoop/build_njs_hello2
            curl --silent --location https://rpm.nodesource.com/setup_8.x | sudo bash -
            sudo yum install nodejs
                npm init   ## default to all prompts
                npm install express --save
            sudo docker build -t pathikpaul/build_njs_hello2 .
            sudo docker run -d -p 8080:8080 pathikpaul/build_njs_hello2
            curl localhost:8080
                FROM ubuntu:14.04
                RUN apt-get update -y
                RUN apt-get install -y curl
                RUN curl -sL https://deb.nodesource.com/setup_4.x | bash -
                RUN apt-get install -y node.js
                RUN mkdir -p /app
                WORKDIR /app
                COPY package.json /app
                RUN npm install
                COPY . /app/
                EXPOSE 8080
                CMD [ "npm", "start" ]

         cd /home/hadoop/build_njs_hello3
            sudo docker build -t pathikpaul/build_njs_hello3 .
            sudo docker run -d -p 8080:8080 pathikpaul/build_njs_hello3
                FROM node:4
                RUN mkdir -p /app
                WORKDIR /app
                COPY package.json /app
                RUN npm install
                COPY . /app/
                EXPOSE 8080
                CMD [ "npm", "start" ]

        
--------------------------------------------------------------------------------------------------------------
-- Recap - Try to run NGINX with HTTPS -----------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------
sudo service docker start
## Create file /home/hadoop/src/index.html
sudo docker run --name hello1    -p8181:80  -v "${PWD}/src:/usr/share/nginx/html" -d nginx            
	** Connect to Nginx image
sudo docker run --name hello1    -p8181:80  -v "${PWD}/src:/usr/share/nginx/html" -d nginx            
sudo docker exec -it 5822db659202 /bin/bash
	**Where above is the Container ID from docker ps"
sudo docker cp 5822db659202:/etc/nginx/nginx.conf /home/hadoop/nginx_example/.
sudo docker cp 5822db659202:/etc/nginx/conf.d/default.conf /home/hadoop/nginx_example/.
cat Dockerfile
	FROM nginx
	COPY default.conf /etc/nginx/conf.d/
	EXPOSE 443
sudo docker build -t pathik/nginx .

https://www.digicert.com/ssl-certificate-installation-nginx.htm
vi default.conf  # add 443
sudo docker run --name ppnginx1 -p8181:80 -p8282:443 -v "${PWD}/src:/usr/share/nginx/html" -v "${PWD}/log:/var/log/nginx" -d pathik/nginx 
	"/etc/ssl/nginx_domain_name.pem") failed (SSL: error:
	Need to create the files
--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------

Volumes
    - Persist and Share data between containers
    
Docker:
https://www.youtube.com/watch?v=YFl2mCHdv24

192.168.1.13

Possible Training Sites
    https://hackr.io/tutorials/learn-docker
    https://prakhar.me/docker-curriculum/
    https://www.katacoda.com/courses/docker
    https://docs.docker.com/engine/tutorials/
    https://docs.docker.com/engine/docker-overview/
    https://github.com/veggiemonk/awesome-docker
    
    
