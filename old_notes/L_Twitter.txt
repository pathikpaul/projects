https://twitter.com/segintech
c............####

http://saurzcode.in/2015/02/kafka-producer-using-twitter-stream/


How to generate Twitter API Keys using Developer Account ?

Go to https://apps.twitter.com/app/new  and log in, if necessary
Enter your Application Name, Description and your website address. You can leave the callback URL empty.
Accept the TOS.
Submit the form by clicking the Create your Twitter Application
Copy the consumer key (API key) and consumer secret from the screen into your application.
After creating your Twitter Application, you have to give the access to your Twitter Account to use this Application. To do this, click the Create my Access Token.
Now you will have Consumer Key, Consumer Secret, Acess token, Access Token Secret to be used in streaming API calls.

==
Consumer Key (API Key)	EhwljwuH532q33EOl0q2ACeUF
Consumer Secret (API Secret)	ETdPA9SdeBR9LrgRSYGslJUNM39C2tL9WaER1C14TV6bIkZM25
Token	714084585601179648-sgrk7Irbjv4aTa2CheE48RD1HYaK26A
Secret	ybwdyK0tGmrdtE48bAXCO7vdqx1jVIQwV6NLk3AZ0qEQ4

Callback URL		None
Callback URL Locked	No
Sign in with Twitter	Yes
App-only authentication	https://api.twitter.com/oauth2/token
Request token URL	https://api.twitter.com/oauth/request_token
Authorize URL		https://api.twitter.com/oauth/authorize
Access token URL	https://api.twitter.com/oauth/access_token

Use the "Keys and Access Token" tab to generate 
	- Consumer Secret (API Secret)
	- Access Token
	- Access Token Secret

==
Src:
	https://github.com/saurzcode/twitter-stream/blob/master/src/main/java/com/saurzcode/twitter/TwitterKafkaProducer.java
	/home/kafka/twitter-stream/src/main/java/com/saurzcode/twitter/TwitterKafkaProducer.java
Pom
	/home/kafka/twitter-stream/pom.xml
	Added below 
            <build>
            <plugins>
            <plugin>
              <groupId>org.apache.maven.plugins</groupId>
              <artifactId>maven-assembly-plugin</artifactId>
              <executions>
                <execution>
                  <phase>package</phase>
                  <goals>
                    <goal>single</goal>
                  </goals>
                  <configuration>
                    <descriptorRefs>
                      <descriptorRef>jar-with-dependencies</descriptorRef>
                    </descriptorRefs>
                  </configuration>
                </execution>
              </executions>
            </plugin>
            </plugins>
            </build>

== 
Maven
cd /home/kafka
wget http://mirror.jax.hugeserver.com/apache/maven/maven-3/3.5.0/binaries/apache-maven-3.5.0-bin.tar.gz
tar -xvf apache-maven-3.5.0-bin.tar.gz
cd /home/kafka/twitter-stream
/home/kafka/apache-maven-3.5.0/bin/mvn clean compile package
O/P
	/home/kafka/twitter-stream/target/twitter-stream-0.0.1-SNAPSHOT-jar-with-dependencies.jar
		com/saurzcode/twitter/TwitterKafkaProducer
		String consumerKey, String consumerSecret, String token, String secret
		EhwljwuH532q33EOl0q2ACeUF  ETdPA9SdeBR9LrgRSYGslJUNM39C2tL9WaER1C14TV6bIkZM25 714084585601179648-sgrk7Irbjv4aTa2CheE48RD1HYaK26A ybwdyK0tGmrdtE48bAXCO7vdqx1jVIQwV6NLk3AZ0qEQ4

Ran Producer using:
	java -cp "/home/kafka/kafka_2.11-0.11.0.0/libs/*":/home/kafka/twitter-stream-0.0.1-SNAPSHOT-jar-with-dependencies.jar com.saurzcode.twitter.itterKafkaProducer **consumerKey** **consumerSecret** **token** **secret**
	java -cp "/home/kafka/kafka_2.11-0.11.0.0/libs/*":/home/kafka/twitter-stream-0.0.1-SNAPSHOT-jar-with-dependencies.jar com.saurzcode.twitter.itterKafkaProducer Ehw........CeUF ETd...........ZM25 714..K26A ybw....EQ4

O/P

java -cp "/home/kafka/kafka_2.11-0.11.0.0/libs/*":/home/kafka/consumer_sample_2.11-1.0.jar ConsumerExample
	


scp kafka@kfdmc6:/home/kafka/twitter-stream/target/twitter-stream-0.0.1-SNAPSHOT-jar-with-dependencies.jar /home/kafka/.
java -cp "/home/kafka/kafka_2.11-0.11.0.0/libs/*":/home/kafka/twitter-stream-0.0.1-SNAPSHOT-jar-with-dependencies.jar com.saurzcode.twitter.TwitterKafkaProducer EhwljwuH532q33EOl0q2ACeUF  ETdPA9SdeBR9LrgRSYGslJUNM39C2tL9WaER1C14TV6bIkZM25 714084585601179648-sgrk7Irbjv4aTa2CheE48RD1HYaK26A ybwdyK0tGmrdtE48bAXCO7vdqx1jVIQwV6NLk3AZ0qEQ4

Received message: (key="null", value="{"created_at":"Thu Jul 27 03:03:44 +0000 2017","id":890407329560227841,"id_str":"890407329560227841","text":"testing #segintech","source":"\u003ca href=\"http:\/\/twitter.com\" rel=\"nofollow\"\u003eTwitter Web Client\u003c\/a\u003e","truncated":false,"in_reply_to_status_id":null,"in_reply_to_status_id_str":null,"in_reply_to_user_id":null,"in_reply_to_user_id_str":null,"in_reply_to_screen_name":null,"user":{"id":714084585601179648,"id_str":"714084585601179648","name":"Pathik Paul","screen_name":"segintech","location":null,"url":null,"description":null,"protected":false,"verified":false,"followers_count":2,"friends_count":5,"listed_count":0,"favourites_count":0,"statuses_count":3,"created_at":"Sun Mar 27 13:40:07 +0000 2016","utc_offset":null,"time_zone":null,"geo_enabled":false,"lang":"en","contributors_enabled":false,"is_translator":false,"profile_background_color":"F5F8FA","profile_background_image_url":"","profile_background_image_url_https":"","profile_background_tile":false,"profile_link_color":"1DA1F2","profile_sidebar_border_color":"C0DEED","profile_sidebar_fill_color":"DDEEF6","profile_text_color":"333333","profile_use_background_image":true,"profile_image_url":"http:\/\/abs.twimg.com\/sticky\/default_profile_images\/default_profile_normal.png","profile_image_url_https":"https:\/\/abs.twimg.com\/sticky\/default_profile_images\/default_profile_normal.png","default_profile":true,"default_profile_image":false,"following":null,"follow_request_sent":null,"notifications":null},"geo":null,"coordinates":null,"place":null,"contributors":null,"is_quote_status":false,"retweet_count":0,"favorite_count":0,"entities":{"hashtags":[{"text":"segintech","indices":[8,18]}],"urls":[],"user_mentions":[],"symbols":[]},"favorited":false,"retweeted":false,"filter_level":"low","lang":"en","timestamp_ms":"1501124624992"}
") at offset ="736"

I sent tweet "testing #segintech"  which was displayed on screen



========================================================
/home/kafka/twitter-stream/pom.xml
========================================================
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
        <modelVersion>4.0.0</modelVersion>
        <groupId>com.saurzcode.twitter</groupId>
        <artifactId>twitter-stream</artifactId>
        <version>0.0.1-SNAPSHOT</version>

<dependencies>
                <dependency>
                        <groupId>com.twitter</groupId>
                        <artifactId>hbc-core</artifactId> <!-- or hbc-twitter4j -->
                        <version>2.2.0</version> <!-- or whatever the latest version is -->
                </dependency>
                <dependency>
                        <groupId>org.apache.kafka</groupId>
                        <artifactId>kafka_2.8.0</artifactId>
                        <version>0.8.1.1</version>
                </dependency>
                <dependency>
                        <groupId>log4j</groupId>
                        <artifactId>log4j</artifactId>
                        <version>1.2.16</version>
                        <exclusions>
                                <exclusion>
                                        <groupId>javax.jms</groupId>
                                        <artifactId>jms</artifactId>
                                </exclusion>
                        </exclusions>
                </dependency>
                <dependency>
                        <groupId>org.slf4j</groupId>
                        <artifactId>slf4j-simple</artifactId>
                        <version>1.6.4</version>
                </dependency>
                <dependency>
                        <groupId>com.google.guava</groupId>
                        <artifactId>guava</artifactId>
                        <version>18.0</version>
                </dependency>
</dependencies>
<build>
            <plugins>
            <plugin>
              <groupId>org.apache.maven.plugins</groupId>
              <artifactId>maven-assembly-plugin</artifactId>
              <executions>
                <execution>
                  <phase>package</phase>
                  <goals>
                    <goal>single</goal>
                  </goals>
                  <configuration>
                    <descriptorRefs>
                      <descriptorRef>jar-with-dependencies</descriptorRef>
                    </descriptorRefs>
                  </configuration>
                </execution>
              </executions>
            </plugin>
            </plugins>
</build>
</project>
========================================================
/home/kafka/twitter-stream/src/main/java/com/saurzcode/twitter/TwitterKafkaProducer.java
========================================================
package com.saurzcode.twitter;

import java.util.Properties;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

import kafka.producer.KeyedMessage;
import kafka.producer.ProducerConfig;

import com.google.common.collect.Lists;
import com.twitter.hbc.ClientBuilder;
import com.twitter.hbc.core.Client;
import com.twitter.hbc.core.Constants;
import com.twitter.hbc.core.endpoint.StatusesFilterEndpoint;
import com.twitter.hbc.core.processor.StringDelimitedProcessor;
import com.twitter.hbc.httpclient.auth.Authentication;
import com.twitter.hbc.httpclient.auth.OAuth1;

public class TwitterKafkaProducer {

        //private static final String topic = "twitter-topic";
        private static final String topic = "test2";

        public static void run(String consumerKey, String consumerSecret,
                        String token, String secret) throws InterruptedException {

                Properties properties = new Properties();
                properties.put("metadata.broker.list", "192.168.77.10:9092,192.168.77.11:9092");
                properties.put("serializer.class", "kafka.serializer.StringEncoder");
                properties.put("client.id","camus");
                ProducerConfig producerConfig = new ProducerConfig(properties);
                kafka.javaapi.producer.Producer<String, String> producer = new kafka.javaapi.producer.Producer<String, String>(
                                producerConfig);

                BlockingQueue<String> queue = new LinkedBlockingQueue<String>(10000);
                StatusesFilterEndpoint endpoint = new StatusesFilterEndpoint();
                // add some track terms
                endpoint.trackTerms(Lists.newArrayList("#segintech"));

                Authentication auth = new OAuth1(consumerKey, consumerSecret, token,
                                secret);
                // Authentication auth = new BasicAuth(username, password);

                // Create a new BasicClient. By default gzip is enabled.
                Client client = new ClientBuilder().hosts(Constants.STREAM_HOST)
                                .endpoint(endpoint).authentication(auth)
                                .processor(new StringDelimitedProcessor(queue)).build();

                // Establish a connection
                client.connect();

                // Do whatever needs to be done with messages
                for (int msgRead = 0; msgRead < 1000; msgRead++) {
                        KeyedMessage<String, String> message = null;
                        try {
                                message = new KeyedMessage<String, String>(topic, queue.take());
                        } catch (InterruptedException e) {
                                e.printStackTrace();
                        }
                        producer.send(message);
                }
                producer.close();
                client.stop();

        }

        public static void main(String[] args) {
                try {
                        TwitterKafkaProducer.run(args[0], args[1], args[2], args[3]);
                } catch (InterruptedException e) {
                        System.out.println(e);
                }
        }
}
